{"version":3,"sources":["../../../../../../client/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js"],"names":["Object","defineProperty","exports","value","default","rewriteLiveReferences","_assert","data","_interopRequireDefault","require","t","_interopRequireWildcard","_template","_helperSimpleAccess","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","desc","getOwnPropertyDescriptor","get","set","programPath","metadata","imported","Map","exported","requeueInParent","requeue","path","source","imports","localName","importName","importsNamespace","local","exportMeta","push","names","traverse","rewriteBindingInitVisitor","scope","Set","Array","from","keys","rewriteReferencesVisitor","seen","WeakSet","buildImportReference","identNode","meta","lazy","callExpression","namespace","identifier","name","memberExpression","ClassProperty","skip","Function","ClassDeclaration","id","node","Error","exportNames","length","statement","expressionStatement","buildBindingExportAssignmentExpression","_blockHoist","insertAfter","VariableDeclaration","getOuterBindingIdentifiers","forEach","localExpr","reduce","expr","exportName","assignmentExpression","buildImportThrow","expression","ast","ReferencedIdentifier","has","add","localBinding","getBinding","rootBinding","importData","ref","loc","parentPath","isCallExpression","callee","isMemberExpression","replaceWith","sequenceExpression","numericLiteral","isJSXIdentifier","object","property","JSXMemberExpression","JSXIdentifier","AssignmentExpression","exit","left","isIdentifier","exportedNames","operator","assignment","right","ids","filter","pop","items","isExpressionStatement"],"mappings":"AAAA;;;;;;;;;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,SAAO;AADoC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,qBAAlB;;AAEA,SAASC,OAAT,GAAmB;AACjB,MAAMC,OAAOC,uBAAuBC,QAAQ,QAAR,CAAvB,CAAb;;AAEAH,YAAU,mBAAY;AACpB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,CAAT,GAAa;AACX,MAAMH,OAAOI,wBAAwBF,QAAQ,cAAR,CAAxB,CAAb;;AAEAC,MAAI,aAAY;AACd,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASK,SAAT,GAAqB;AACnB,MAAML,OAAOC,uBAAuBC,QAAQ,iBAAR,CAAvB,CAAb;;AAEAG,cAAY,qBAAY;AACtB,WAAOL,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASM,mBAAT,GAA+B;AAC7B,MAAMN,OAAOC,uBAAuBC,QAAQ,6BAAR,CAAvB,CAAb;;AAEAI,wBAAsB,+BAAY;AAChC,WAAON,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASI,uBAAT,CAAiCG,GAAjC,EAAsC;AAAE,MAAIA,OAAOA,IAAIC,UAAf,EAA2B;AAAE,WAAOD,GAAP;AAAa,GAA1C,MAAgD;AAAE,QAAIE,SAAS,EAAb,CAAiB,IAAIF,OAAO,IAAX,EAAiB;AAAE,WAAK,IAAIG,GAAT,IAAgBH,GAAhB,EAAqB;AAAE,YAAId,OAAOkB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,GAArC,EAA0CG,GAA1C,CAAJ,EAAoD;AAAE,cAAII,OAAOrB,OAAOC,cAAP,IAAyBD,OAAOsB,wBAAhC,GAA2DtB,OAAOsB,wBAAP,CAAgCR,GAAhC,EAAqCG,GAArC,CAA3D,GAAuG,EAAlH,CAAsH,IAAII,KAAKE,GAAL,IAAYF,KAAKG,GAArB,EAA0B;AAAExB,mBAAOC,cAAP,CAAsBe,MAAtB,EAA8BC,GAA9B,EAAmCI,IAAnC;AAA2C,WAAvE,MAA6E;AAAEL,mBAAOC,GAAP,IAAcH,IAAIG,GAAJ,CAAd;AAAyB;AAAE;AAAE;AAAE,KAACD,OAAOZ,OAAP,GAAiBU,GAAjB,CAAsB,OAAOE,MAAP;AAAgB;AAAE;;AAExd,SAASR,sBAAT,CAAgCM,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEV,SAASU,GAAX,EAArC;AAAwD;;AAE/F,SAAST,qBAAT,CAA+BoB,WAA/B,EAA4CC,QAA5C,EAAsD;AACpD,MAAMC,WAAW,IAAIC,GAAJ,EAAjB;AACA,MAAMC,WAAW,IAAID,GAAJ,EAAjB;;AAEA,MAAME,kBAAkB,SAAlBA,eAAkB,OAAQ;AAC9BL,gBAAYM,OAAZ,CAAoBC,IAApB;AACD,GAFD;;AAJoD;AAAA;AAAA;;AAAA;AAQpD,yBAA6BN,SAASO,MAAtC,8HAA8C;AAAA;AAAA,UAAlCA,MAAkC;AAAA,UAA1B1B,IAA0B;;AAAA;AAAA;AAAA;;AAAA;AAC5C,8BAAsCA,KAAK2B,OAA3C,mIAAoD;AAAA;AAAA,cAAxCC,SAAwC;AAAA,cAA7BC,UAA6B;;AAClDT,mBAASH,GAAT,CAAaW,SAAb,EAAwB,CAACF,MAAD,EAASG,UAAT,EAAqB,IAArB,CAAxB;AACD;AAH2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAK5C,8BAAwB7B,KAAK8B,gBAA7B,mIAA+C;AAAA,cAApCF,SAAoC;;AAC7CR,mBAASH,GAAT,CAAaW,SAAb,EAAwB,CAACF,MAAD,EAAS,IAAT,EAAeE,SAAf,CAAxB;AACD;AAP2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ7C;AAhBmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAkBpD,0BAA4BT,SAASY,KAArC,mIAA4C;AAAA;;AAAA;AAAA,UAAhCA,KAAgC;AAAA,UAAzB/B,IAAyB;;AAC1C,UAAIgC,aAAaV,SAASN,GAAT,CAAae,KAAb,CAAjB;;AAEA,UAAI,CAACC,UAAL,EAAiB;AACfA,qBAAa,EAAb;AACAV,iBAASL,GAAT,CAAac,KAAb,EAAoBC,UAApB;AACD;;AAED,iCAAWC,IAAX,uCAAmBjC,KAAKkC,KAAxB;AACD;AA3BmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6BpDhB,cAAYiB,QAAZ,CAAqBC,yBAArB,EAAgD;AAC9CjB,sBAD8C;AAE9CI,oCAF8C;AAG9Cc,WAAOnB,YAAYmB,KAH2B;AAI9Cf;AAJ8C,GAAhD;AAMA,GAAC,GAAGhB,sBAAsBT,OAA1B,EAAmCqB,WAAnC,EAAgD,IAAIoB,GAAJ,8BAAYC,MAAMC,IAAN,CAAWpB,SAASqB,IAAT,EAAX,CAAZ,sBAA4CF,MAAMC,IAAN,CAAWlB,SAASmB,IAAT,EAAX,CAA5C,GAAhD;AACAvB,cAAYiB,QAAZ,CAAqBO,wBAArB,EAA+C;AAC7CC,UAAM,IAAIC,OAAJ,EADuC;AAE7CzB,sBAF6C;AAG7CI,oCAH6C;AAI7Cc,WAAOnB,YAAYmB,KAJ0B;AAK7CjB,sBAL6C;AAM7CE,sBAN6C;AAO7CuB,0BAAsB,oCAAkCC,SAAlC,EAAgD;AAAA;AAAA,UAA9CpB,MAA8C;AAAA,UAAtCG,UAAsC;AAAA,UAA1BD,SAA0B;;AACpE,UAAMmB,OAAO5B,SAASO,MAAT,CAAgBV,GAAhB,CAAoBU,MAApB,CAAb;;AAEA,UAAIE,SAAJ,EAAe;AACb,YAAImB,KAAKC,IAAT,EAAeF,YAAY3C,IAAI8C,cAAJ,CAAmBH,SAAnB,EAA8B,EAA9B,CAAZ;AACf,eAAOA,SAAP;AACD;;AAED,UAAII,YAAY/C,IAAIgD,UAAJ,CAAeJ,KAAKK,IAApB,CAAhB;AACA,UAAIL,KAAKC,IAAT,EAAeE,YAAY/C,IAAI8C,cAAJ,CAAmBC,SAAnB,EAA8B,EAA9B,CAAZ;AACf,aAAO/C,IAAIkD,gBAAJ,CAAqBH,SAArB,EAAgC/C,IAAIgD,UAAJ,CAAetB,UAAf,CAAhC,CAAP;AACD;AAlB4C,GAA/C;AAoBD;;AAED,IAAMO,4BAA4B;AAChCkB,eADgC,yBAClB7B,IADkB,EACZ;AAClBA,SAAK8B,IAAL;AACD,GAH+B;AAKhCC,UALgC,oBAKvB/B,IALuB,EAKjB;AACbA,SAAK8B,IAAL;AACD,GAP+B;AAShCE,kBATgC,4BASfhC,IATe,EAST;AAAA,QAEnBF,eAFmB,GAKjB,IALiB,CAEnBA,eAFmB;AAAA,QAGnBD,QAHmB,GAKjB,IALiB,CAGnBA,QAHmB;AAAA,QAInBH,QAJmB,GAKjB,IALiB,CAInBA,QAJmB;AAAA,QAOnBuC,EAPmB,GAQjBjC,KAAKkC,IARY,CAOnBD,EAPmB;;AASrB,QAAI,CAACA,EAAL,EAAS,MAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACT,QAAMhC,YAAY8B,GAAGN,IAArB;AACA,QAAMS,cAAcvC,SAASN,GAAT,CAAaY,SAAb,KAA2B,EAA/C;;AAEA,QAAIiC,YAAYC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,UAAMC,YAAY5D,IAAI6D,mBAAJ,CAAwBC,uCAAuC9C,QAAvC,EAAiD0C,WAAjD,EAA8D1D,IAAIgD,UAAJ,CAAevB,SAAf,CAA9D,CAAxB,CAAlB;AACAmC,gBAAUG,WAAV,GAAwBzC,KAAKkC,IAAL,CAAUO,WAAlC;AACA3C,sBAAgBE,KAAK0C,WAAL,CAAiBJ,SAAjB,EAA4B,CAA5B,CAAhB;AACD;AACF,GA3B+B;AA6BhCK,qBA7BgC,+BA6BZ3C,IA7BY,EA6BN;AAAA,QAEtBF,eAFsB,GAKpB,IALoB,CAEtBA,eAFsB;AAAA,QAGtBD,QAHsB,GAKpB,IALoB,CAGtBA,QAHsB;AAAA,QAItBH,QAJsB,GAKpB,IALoB,CAItBA,QAJsB;;AAMxB1B,WAAOgD,IAAP,CAAYhB,KAAK4C,0BAAL,EAAZ,EAA+CC,OAA/C,CAAuD,qBAAa;AAClE,UAAMT,cAAcvC,SAASN,GAAT,CAAaY,SAAb,KAA2B,EAA/C;;AAEA,UAAIiC,YAAYC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,YAAMC,YAAY5D,IAAI6D,mBAAJ,CAAwBC,uCAAuC9C,QAAvC,EAAiD0C,WAAjD,EAA8D1D,IAAIgD,UAAJ,CAAevB,SAAf,CAA9D,CAAxB,CAAlB;AACAmC,kBAAUG,WAAV,GAAwBzC,KAAKkC,IAAL,CAAUO,WAAlC;AACA3C,wBAAgBE,KAAK0C,WAAL,CAAiBJ,SAAjB,EAA4B,CAA5B,CAAhB;AACD;AACF,KARD;AASD;AA5C+B,CAAlC;;AAgDA,IAAME,yCAAyC,SAAzCA,sCAAyC,CAAC9C,QAAD,EAAW0C,WAAX,EAAwBU,SAAxB,EAAsC;AACnF,SAAO,CAACV,eAAe,EAAhB,EAAoBW,MAApB,CAA2B,UAACC,IAAD,EAAOC,UAAP,EAAsB;AACtD,WAAOvE,IAAIwE,oBAAJ,CAAyB,GAAzB,EAA8BxE,IAAIkD,gBAAJ,CAAqBlD,IAAIgD,UAAJ,CAAehC,SAASuD,UAAxB,CAArB,EAA0DvE,IAAIgD,UAAJ,CAAeuB,UAAf,CAA1D,CAA9B,EAAqHD,IAArH,CAAP;AACD,GAFM,EAEJF,SAFI,CAAP;AAGD,CAJD;;AAMA,IAAMK,mBAAmB,SAAnBA,gBAAmB,YAAa;AACpC,SAAOvE,YAAYR,OAAZ,CAAoBgF,UAApB,CAA+BC,GAAtC,kBAE6BlD,SAF7B;AAKD,CAND;;AAQA,IAAMc,2BAA2B;AAC/BqC,sBAD+B,gCACVtD,IADU,EACJ;AAAA,QAEvBkB,IAFuB,GAOrB,IAPqB,CAEvBA,IAFuB;AAAA,QAGvBE,oBAHuB,GAOrB,IAPqB,CAGvBA,oBAHuB;AAAA,QAIvBR,KAJuB,GAOrB,IAPqB,CAIvBA,KAJuB;AAAA,QAKvBjB,QALuB,GAOrB,IAPqB,CAKvBA,QALuB;AAAA,QAMvBG,eANuB,GAOrB,IAPqB,CAMvBA,eANuB;;AAQzB,QAAIoB,KAAKqC,GAAL,CAASvD,KAAKkC,IAAd,CAAJ,EAAyB;AACzBhB,SAAKsC,GAAL,CAASxD,KAAKkC,IAAd;AACA,QAAM/B,YAAYH,KAAKkC,IAAL,CAAUP,IAA5B;AACA,QAAM8B,eAAezD,KAAKY,KAAL,CAAW8C,UAAX,CAAsBvD,SAAtB,CAArB;AACA,QAAMwD,cAAc/C,MAAM8C,UAAN,CAAiBvD,SAAjB,CAApB;AACA,QAAIwD,gBAAgBF,YAApB,EAAkC;AAClC,QAAMG,aAAajE,SAASJ,GAAT,CAAaY,SAAb,CAAnB;;AAEA,QAAIyD,UAAJ,EAAgB;AACd,UAAMC,MAAMzC,qBAAqBwC,UAArB,EAAiC5D,KAAKkC,IAAtC,CAAZ;AACA2B,UAAIC,GAAJ,GAAU9D,KAAKkC,IAAL,CAAU4B,GAApB;;AAEA,UAAI9D,KAAK+D,UAAL,CAAgBC,gBAAhB,CAAiC;AACnCC,gBAAQjE,KAAKkC;AADsB,OAAjC,KAEExD,IAAIwF,kBAAJ,CAAuBL,GAAvB,CAFN,EAEmC;AACjC7D,aAAKmE,WAAL,CAAiBzF,IAAI0F,kBAAJ,CAAuB,CAAC1F,IAAI2F,cAAJ,CAAmB,CAAnB,CAAD,EAAwBR,GAAxB,CAAvB,CAAjB;AACD,OAJD,MAIO,IAAI7D,KAAKsE,eAAL,MAA0B5F,IAAIwF,kBAAJ,CAAuBL,GAAvB,CAA9B,EAA2D;AAAA,YAE9DU,MAF8D,GAI5DV,GAJ4D,CAE9DU,MAF8D;AAAA,YAG9DC,QAH8D,GAI5DX,GAJ4D,CAG9DW,QAH8D;;AAKhExE,aAAKmE,WAAL,CAAiBzF,IAAI+F,mBAAJ,CAAwB/F,IAAIgG,aAAJ,CAAkBH,OAAO5C,IAAzB,CAAxB,EAAwDjD,IAAIgG,aAAJ,CAAkBF,SAAS7C,IAA3B,CAAxD,CAAjB;AACD,OANM,MAMA;AACL3B,aAAKmE,WAAL,CAAiBN,GAAjB;AACD;;AAED/D,sBAAgBE,IAAhB;AACAA,WAAK8B,IAAL;AACD;AACF,GAtC8B;;;AAwC/B6C,wBAAsB;AACpBC,QADoB,gBACf5E,IADe,EACT;AAAA;;AAAA,UAEPY,KAFO,GAQL,IARK,CAEPA,KAFO;AAAA,UAGPM,IAHO,GAQL,IARK,CAGPA,IAHO;AAAA,UAIPvB,QAJO,GAQL,IARK,CAIPA,QAJO;AAAA,UAKPE,QALO,GAQL,IARK,CAKPA,QALO;AAAA,UAMPC,eANO,GAQL,IARK,CAMPA,eANO;AAAA,UAOPsB,oBAPO,GAQL,IARK,CAOPA,oBAPO;;AAST,UAAIF,KAAKqC,GAAL,CAASvD,KAAKkC,IAAd,CAAJ,EAAyB;AACzBhB,WAAKsC,GAAL,CAASxD,KAAKkC,IAAd;AACA,UAAM2C,OAAO7E,KAAKT,GAAL,CAAS,MAAT,CAAb;;AAEA,UAAIsF,KAAKC,YAAL,EAAJ,EAAyB;AACvB,YAAM3E,YAAY0E,KAAK3C,IAAL,CAAUP,IAA5B;;AAEA,YAAIf,MAAM8C,UAAN,CAAiBvD,SAAjB,MAAgCH,KAAKY,KAAL,CAAW8C,UAAX,CAAsBvD,SAAtB,CAApC,EAAsE;AACpE;AACD;;AAED,YAAM4E,gBAAgBlF,SAASN,GAAT,CAAaY,SAAb,KAA2B,EAAjD;AACA,YAAMyD,aAAajE,SAASJ,GAAT,CAAaY,SAAb,CAAnB;;AAEA,YAAI4E,cAAc1C,MAAd,GAAuB,CAAvB,IAA4BuB,UAAhC,EAA4C;AAC1C,WAAC,GAAGtF,UAAUF,OAAd,EAAuB4B,KAAKkC,IAAL,CAAU8C,QAAV,KAAuB,GAA9C,EAAmD,yBAAnD;AACA,cAAMC,aAAajF,KAAKkC,IAAxB;;AAEA,cAAI0B,UAAJ,EAAgB;AACdqB,uBAAWJ,IAAX,GAAkBzD,qBAAqBwC,UAArB,EAAiCqB,WAAWJ,IAA5C,CAAlB;AACAI,uBAAWC,KAAX,GAAmBxG,IAAI0F,kBAAJ,CAAuB,CAACa,WAAWC,KAAZ,EAAmB/B,iBAAiBhD,SAAjB,CAAnB,CAAvB,CAAnB;AACD;;AAEDH,eAAKmE,WAAL,CAAiB3B,uCAAuC,KAAK9C,QAA5C,EAAsDqF,aAAtD,EAAqEE,UAArE,CAAjB;AACAnF,0BAAgBE,IAAhB;AACD;AACF,OAtBD,MAsBO,IAAI6E,KAAKX,kBAAL,EAAJ,EAA+B,CAAE,CAAjC,MAAuC;AAC5C,YAAMiB,MAAMN,KAAKjC,0BAAL,EAAZ;AACA,YAAMX,KAAKjE,OAAOgD,IAAP,CAAYmE,GAAZ,EAAiBC,MAAjB,CAAwB;AAAA,iBAAazF,SAAS4D,GAAT,CAAapD,SAAb,CAAb;AAAA,SAAxB,EAA8DkF,GAA9D,EAAX;;AAEA,YAAIpD,EAAJ,EAAQ;AACNjC,eAAKkC,IAAL,CAAUgD,KAAV,GAAkBxG,IAAI0F,kBAAJ,CAAuB,CAACpE,KAAKkC,IAAL,CAAUgD,KAAX,EAAkB/B,iBAAiBlB,EAAjB,CAAlB,CAAvB,CAAlB;AACD;;AAED,YAAMqD,QAAQ,EAAd;AACAtH,eAAOgD,IAAP,CAAYmE,GAAZ,EAAiBtC,OAAjB,CAAyB,qBAAa;AACpC,cAAIjC,MAAM8C,UAAN,CAAiBvD,SAAjB,MAAgCH,KAAKY,KAAL,CAAW8C,UAAX,CAAsBvD,SAAtB,CAApC,EAAsE;AACpE;AACD;;AAED,cAAM4E,gBAAgBlF,SAASN,GAAT,CAAaY,SAAb,KAA2B,EAAjD;;AAEA,cAAI4E,cAAc1C,MAAd,GAAuB,CAA3B,EAA8B;AAC5BiD,kBAAM9E,IAAN,CAAWgC,uCAAuC,MAAK9C,QAA5C,EAAsDqF,aAAtD,EAAqErG,IAAIgD,UAAJ,CAAevB,SAAf,CAArE,CAAX;AACD;AACF,SAVD;;AAYA,YAAImF,MAAMjD,MAAN,GAAe,CAAnB,EAAsB;AACpB,cAAIH,OAAOxD,IAAI0F,kBAAJ,CAAuBkB,KAAvB,CAAX;;AAEA,cAAItF,KAAK+D,UAAL,CAAgBwB,qBAAhB,EAAJ,EAA6C;AAC3CrD,mBAAOxD,IAAI6D,mBAAJ,CAAwBL,IAAxB,CAAP;AACAA,iBAAKO,WAAL,GAAmBzC,KAAK+D,UAAL,CAAgB7B,IAAhB,CAAqBO,WAAxC;AACD;;AAED,cAAMH,YAAYtC,KAAK0C,WAAL,CAAiBR,IAAjB,EAAuB,CAAvB,CAAlB;AACApC,0BAAgBwC,SAAhB;AACD;AACF;AACF;AArEmB;AAxCS,CAAjC","file":"rewrite-live-references.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rewriteLiveReferences;\n\nfunction _assert() {\n  const data = _interopRequireDefault(require(\"assert\"));\n\n  _assert = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction t() {\n  const data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  t = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _template() {\n  const data = _interopRequireDefault(require(\"@babel/template\"));\n\n  _template = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _helperSimpleAccess() {\n  const data = _interopRequireDefault(require(\"@babel/helper-simple-access\"));\n\n  _helperSimpleAccess = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction rewriteLiveReferences(programPath, metadata) {\n  const imported = new Map();\n  const exported = new Map();\n\n  const requeueInParent = path => {\n    programPath.requeue(path);\n  };\n\n  for (const [source, data] of metadata.source) {\n    for (const [localName, importName] of data.imports) {\n      imported.set(localName, [source, importName, null]);\n    }\n\n    for (const localName of data.importsNamespace) {\n      imported.set(localName, [source, null, localName]);\n    }\n  }\n\n  for (const [local, data] of metadata.local) {\n    let exportMeta = exported.get(local);\n\n    if (!exportMeta) {\n      exportMeta = [];\n      exported.set(local, exportMeta);\n    }\n\n    exportMeta.push(...data.names);\n  }\n\n  programPath.traverse(rewriteBindingInitVisitor, {\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    exported\n  });\n  (0, _helperSimpleAccess().default)(programPath, new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]));\n  programPath.traverse(rewriteReferencesVisitor, {\n    seen: new WeakSet(),\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    imported,\n    exported,\n    buildImportReference: ([source, importName, localName], identNode) => {\n      const meta = metadata.source.get(source);\n\n      if (localName) {\n        if (meta.lazy) identNode = t().callExpression(identNode, []);\n        return identNode;\n      }\n\n      let namespace = t().identifier(meta.name);\n      if (meta.lazy) namespace = t().callExpression(namespace, []);\n      return t().memberExpression(namespace, t().identifier(importName));\n    }\n  });\n}\n\nconst rewriteBindingInitVisitor = {\n  ClassProperty(path) {\n    path.skip();\n  },\n\n  Function(path) {\n    path.skip();\n  },\n\n  ClassDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    const {\n      id\n    } = path.node;\n    if (!id) throw new Error(\"Expected class to have a name\");\n    const localName = id.name;\n    const exportNames = exported.get(localName) || [];\n\n    if (exportNames.length > 0) {\n      const statement = t().expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, t().identifier(localName)));\n      statement._blockHoist = path.node._blockHoist;\n      requeueInParent(path.insertAfter(statement)[0]);\n    }\n  },\n\n  VariableDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    Object.keys(path.getOuterBindingIdentifiers()).forEach(localName => {\n      const exportNames = exported.get(localName) || [];\n\n      if (exportNames.length > 0) {\n        const statement = t().expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, t().identifier(localName)));\n        statement._blockHoist = path.node._blockHoist;\n        requeueInParent(path.insertAfter(statement)[0]);\n      }\n    });\n  }\n\n};\n\nconst buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr) => {\n  return (exportNames || []).reduce((expr, exportName) => {\n    return t().assignmentExpression(\"=\", t().memberExpression(t().identifier(metadata.exportName), t().identifier(exportName)), expr);\n  }, localExpr);\n};\n\nconst buildImportThrow = localName => {\n  return _template().default.expression.ast`\n    (function() {\n      throw new Error('\"' + '${localName}' + '\" is read-only.');\n    })()\n  `;\n};\n\nconst rewriteReferencesVisitor = {\n  ReferencedIdentifier(path) {\n    const {\n      seen,\n      buildImportReference,\n      scope,\n      imported,\n      requeueInParent\n    } = this;\n    if (seen.has(path.node)) return;\n    seen.add(path.node);\n    const localName = path.node.name;\n    const localBinding = path.scope.getBinding(localName);\n    const rootBinding = scope.getBinding(localName);\n    if (rootBinding !== localBinding) return;\n    const importData = imported.get(localName);\n\n    if (importData) {\n      const ref = buildImportReference(importData, path.node);\n      ref.loc = path.node.loc;\n\n      if (path.parentPath.isCallExpression({\n        callee: path.node\n      }) && t().isMemberExpression(ref)) {\n        path.replaceWith(t().sequenceExpression([t().numericLiteral(0), ref]));\n      } else if (path.isJSXIdentifier() && t().isMemberExpression(ref)) {\n        const {\n          object,\n          property\n        } = ref;\n        path.replaceWith(t().JSXMemberExpression(t().JSXIdentifier(object.name), t().JSXIdentifier(property.name)));\n      } else {\n        path.replaceWith(ref);\n      }\n\n      requeueInParent(path);\n      path.skip();\n    }\n  },\n\n  AssignmentExpression: {\n    exit(path) {\n      const {\n        scope,\n        seen,\n        imported,\n        exported,\n        requeueInParent,\n        buildImportReference\n      } = this;\n      if (seen.has(path.node)) return;\n      seen.add(path.node);\n      const left = path.get(\"left\");\n\n      if (left.isIdentifier()) {\n        const localName = left.node.name;\n\n        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n          return;\n        }\n\n        const exportedNames = exported.get(localName) || [];\n        const importData = imported.get(localName);\n\n        if (exportedNames.length > 0 || importData) {\n          (0, _assert().default)(path.node.operator === \"=\", \"Path was not simplified\");\n          const assignment = path.node;\n\n          if (importData) {\n            assignment.left = buildImportReference(importData, assignment.left);\n            assignment.right = t().sequenceExpression([assignment.right, buildImportThrow(localName)]);\n          }\n\n          path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment));\n          requeueInParent(path);\n        }\n      } else if (left.isMemberExpression()) {} else {\n        const ids = left.getOuterBindingIdentifiers();\n        const id = Object.keys(ids).filter(localName => imported.has(localName)).pop();\n\n        if (id) {\n          path.node.right = t().sequenceExpression([path.node.right, buildImportThrow(id)]);\n        }\n\n        const items = [];\n        Object.keys(ids).forEach(localName => {\n          if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n            return;\n          }\n\n          const exportedNames = exported.get(localName) || [];\n\n          if (exportedNames.length > 0) {\n            items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, t().identifier(localName)));\n          }\n        });\n\n        if (items.length > 0) {\n          let node = t().sequenceExpression(items);\n\n          if (path.parentPath.isExpressionStatement()) {\n            node = t().expressionStatement(node);\n            node._blockHoist = path.parentPath.node._blockHoist;\n          }\n\n          const statement = path.insertAfter(node)[0];\n          requeueInParent(statement);\n        }\n      }\n    }\n\n  }\n};"]}