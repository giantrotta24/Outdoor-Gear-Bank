"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _assert() {
  var data = _interopRequireDefault(require("assert"));

  _assert = function _assert() {
    return data;
  };

  return data;
}

function t() {
  var data = _interopRequireWildcard(require("@babel/types"));

  t = function t() {
    return data;
  };

  return data;
}

var _importBuilder = _interopRequireDefault(require("./import-builder"));

var _isModule = _interopRequireDefault(require("./is-module"));

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var ImportInjector = function () {
  function ImportInjector(path, importedSource, opts) {
    _classCallCheck(this, ImportInjector);

    this._defaultOpts = {
      importedSource: null,
      importedType: "commonjs",
      importedInterop: "babel",
      importingInterop: "babel",
      ensureLiveReference: false,
      ensureNoContext: false
    };
    var programPath = path.find(function (p) {
      return p.isProgram();
    });
    this._programPath = programPath;
    this._programScope = programPath.scope;
    this._hub = programPath.hub;
    this._defaultOpts = this._applyDefaults(importedSource, opts, true);
  }

  _createClass(ImportInjector, [{
    key: "addDefault",
    value: function addDefault(importedSourceIn, opts) {
      return this.addNamed("default", importedSourceIn, opts);
    }
  }, {
    key: "addNamed",
    value: function addNamed(importName, importedSourceIn, opts) {
      (0, _assert().default)(typeof importName === "string");
      return this._generateImport(this._applyDefaults(importedSourceIn, opts), importName);
    }
  }, {
    key: "addNamespace",
    value: function addNamespace(importedSourceIn, opts) {
      return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);
    }
  }, {
    key: "addSideEffect",
    value: function addSideEffect(importedSourceIn, opts) {
      return this._generateImport(this._applyDefaults(importedSourceIn, opts), false);
    }
  }, {
    key: "_applyDefaults",
    value: function _applyDefaults(importedSource, opts) {
      var isInit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var optsList = [];

      if (typeof importedSource === "string") {
        optsList.push({
          importedSource: importedSource
        });
        optsList.push(opts);
      } else {
        (0, _assert().default)(!opts, "Unexpected secondary arguments.");
        optsList.push(importedSource);
      }

      var newOpts = Object.assign({}, this._defaultOpts);

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        var _loop = function _loop() {
          var opts = _step.value;

          if (!opts) return "continue";
          Object.keys(newOpts).forEach(function (key) {
            if (opts[key] !== undefined) newOpts[key] = opts[key];
          });

          if (!isInit) {
            if (opts.nameHint !== undefined) newOpts.nameHint = opts.nameHint;
            if (opts.blockHoist !== undefined) newOpts.blockHoist = opts.blockHoist;
          }
        };

        for (var _iterator = optsList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ret = _loop();

          if (_ret === "continue") continue;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return newOpts;
    }
  }, {
    key: "_generateImport",
    value: function _generateImport(opts, importName) {
      var isDefault = importName === "default";
      var isNamed = !!importName && !isDefault;
      var isNamespace = importName === null;
      var importedSource = opts.importedSource,
          importedType = opts.importedType,
          importedInterop = opts.importedInterop,
          importingInterop = opts.importingInterop,
          ensureLiveReference = opts.ensureLiveReference,
          ensureNoContext = opts.ensureNoContext,
          nameHint = opts.nameHint,
          blockHoist = opts.blockHoist;

      var name = nameHint || importName;
      var isMod = (0, _isModule.default)(this._programPath);
      var isModuleForNode = isMod && importingInterop === "node";
      var isModuleForBabel = isMod && importingInterop === "babel";
      var builder = new _importBuilder.default(importedSource, this._programScope, this._hub);

      if (importedType === "es6") {
        if (!isModuleForNode && !isModuleForBabel) {
          throw new Error("Cannot import an ES6 module from CommonJS");
        }

        builder.import();

        if (isNamespace) {
          builder.namespace(nameHint || importedSource);
        } else if (isDefault || isNamed) {
          builder.named(name, importName);
        }
      } else if (importedType !== "commonjs") {
        throw new Error("Unexpected interopType \"" + importedType + "\"");
      } else if (importedInterop === "babel") {
        if (isModuleForNode) {
          name = name !== "default" ? name : importedSource;
          var es6Default = importedSource + "$es6Default";
          builder.import();

          if (isNamespace) {
            builder.default(es6Default).var(name || importedSource).wildcardInterop();
          } else if (isDefault) {
            if (ensureLiveReference) {
              builder.default(es6Default).var(name || importedSource).defaultInterop().read("default");
            } else {
              builder.default(es6Default).var(name).defaultInterop().prop(importName);
            }
          } else if (isNamed) {
            builder.default(es6Default).read(importName);
          }
        } else if (isModuleForBabel) {
          builder.import();

          if (isNamespace) {
            builder.namespace(name || importedSource);
          } else if (isDefault || isNamed) {
            builder.named(name, importName);
          }
        } else {
          builder.require();

          if (isNamespace) {
            builder.var(name || importedSource).wildcardInterop();
          } else if ((isDefault || isNamed) && ensureLiveReference) {
            if (isDefault) {
              name = name !== "default" ? name : importedSource;
              builder.var(name).read(importName);
              builder.defaultInterop();
            } else {
              builder.var(importedSource).read(importName);
            }
          } else if (isDefault) {
            builder.var(name).defaultInterop().prop(importName);
          } else if (isNamed) {
            builder.var(name).prop(importName);
          }
        }
      } else if (importedInterop === "compiled") {
        if (isModuleForNode) {
          builder.import();

          if (isNamespace) {
            builder.default(name || importedSource);
          } else if (isDefault || isNamed) {
            builder.default(importedSource).read(name);
          }
        } else if (isModuleForBabel) {
          builder.import();

          if (isNamespace) {
            builder.namespace(name || importedSource);
          } else if (isDefault || isNamed) {
            builder.named(name, importName);
          }
        } else {
          builder.require();

          if (isNamespace) {
            builder.var(name || importedSource);
          } else if (isDefault || isNamed) {
            if (ensureLiveReference) {
              builder.var(importedSource).read(name);
            } else {
              builder.prop(importName).var(name);
            }
          }
        }
      } else if (importedInterop === "uncompiled") {
        if (isDefault && ensureLiveReference) {
          throw new Error("No live reference for commonjs default");
        }

        if (isModuleForNode) {
          builder.import();

          if (isNamespace) {
            builder.default(name || importedSource);
          } else if (isDefault) {
            builder.default(name);
          } else if (isNamed) {
            builder.default(importedSource).read(name);
          }
        } else if (isModuleForBabel) {
          builder.import();

          if (isNamespace) {
            builder.default(name || importedSource);
          } else if (isDefault) {
            builder.default(name);
          } else if (isNamed) {
            builder.named(name, importName);
          }
        } else {
          builder.require();

          if (isNamespace) {
            builder.var(name || importedSource);
          } else if (isDefault) {
            builder.var(name);
          } else if (isNamed) {
            if (ensureLiveReference) {
              builder.var(importedSource).read(name);
            } else {
              builder.var(name).prop(importName);
            }
          }
        }
      } else {
        throw new Error("Unknown importedInterop \"" + importedInterop + "\".");
      }

      var _builder$done = builder.done(),
          statements = _builder$done.statements,
          resultName = _builder$done.resultName;

      this._insertStatements(statements, blockHoist);

      if ((isDefault || isNamed) && ensureNoContext && resultName.type !== "Identifier") {
        return t().sequenceExpression([t().numericLiteral(0), resultName]);
      }

      return resultName;
    }
  }, {
    key: "_insertStatements",
    value: function _insertStatements(statements) {
      var blockHoist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;

      statements.forEach(function (node) {
        node._blockHoist = blockHoist;
      });

      var targetPath = this._programPath.get("body").filter(function (p) {
        var val = p.node._blockHoist;
        return Number.isFinite(val) && val < 4;
      })[0];

      if (targetPath) {
        targetPath.insertBefore(statements);
      } else {
        this._programPath.unshiftContainer("body", statements);
      }
    }
  }]);

  return ImportInjector;
}();

exports.default = ImportInjector;
//# sourceMappingURL=import-injector.js.map