"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _assert() {
  var data = _interopRequireDefault(require("assert"));

  _assert = function _assert() {
    return data;
  };

  return data;
}

function t() {
  var data = _interopRequireWildcard(require("@babel/types"));

  t = function t() {
    return data;
  };

  return data;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var ImportBuilder = function () {
  function ImportBuilder(importedSource, scope, hub) {
    _classCallCheck(this, ImportBuilder);

    this._statements = [];
    this._resultName = null;
    this._scope = null;
    this._hub = null;
    this._scope = scope;
    this._hub = hub;
    this._importedSource = importedSource;
  }

  _createClass(ImportBuilder, [{
    key: "done",
    value: function done() {
      return {
        statements: this._statements,
        resultName: this._resultName
      };
    }
  }, {
    key: "import",
    value: function _import() {
      this._statements.push(t().importDeclaration([], t().stringLiteral(this._importedSource)));

      return this;
    }
  }, {
    key: "require",
    value: function require() {
      this._statements.push(t().expressionStatement(t().callExpression(t().identifier("require"), [t().stringLiteral(this._importedSource)])));

      return this;
    }
  }, {
    key: "namespace",
    value: function namespace() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "namespace";

      name = this._scope.generateUidIdentifier(name);
      var statement = this._statements[this._statements.length - 1];
      (0, _assert().default)(statement.type === "ImportDeclaration");
      (0, _assert().default)(statement.specifiers.length === 0);
      statement.specifiers = [t().importNamespaceSpecifier(name)];
      this._resultName = t().cloneNode(name);
      return this;
    }
  }, {
    key: "default",
    value: function _default(name) {
      name = this._scope.generateUidIdentifier(name);
      var statement = this._statements[this._statements.length - 1];
      (0, _assert().default)(statement.type === "ImportDeclaration");
      (0, _assert().default)(statement.specifiers.length === 0);
      statement.specifiers = [t().importDefaultSpecifier(name)];
      this._resultName = t().cloneNode(name);
      return this;
    }
  }, {
    key: "named",
    value: function named(name, importName) {
      if (importName === "default") return this.default(name);
      name = this._scope.generateUidIdentifier(name);
      var statement = this._statements[this._statements.length - 1];
      (0, _assert().default)(statement.type === "ImportDeclaration");
      (0, _assert().default)(statement.specifiers.length === 0);
      statement.specifiers = [t().importSpecifier(name, t().identifier(importName))];
      this._resultName = t().cloneNode(name);
      return this;
    }
  }, {
    key: "var",
    value: function _var(name) {
      name = this._scope.generateUidIdentifier(name);
      var statement = this._statements[this._statements.length - 1];

      if (statement.type !== "ExpressionStatement") {
        (0, _assert().default)(this._resultName);
        statement = t().expressionStatement(this._resultName);

        this._statements.push(statement);
      }

      this._statements[this._statements.length - 1] = t().variableDeclaration("var", [t().variableDeclarator(name, statement.expression)]);
      this._resultName = t().cloneNode(name);
      return this;
    }
  }, {
    key: "defaultInterop",
    value: function defaultInterop() {
      return this._interop(this._hub.addHelper("interopRequireDefault"));
    }
  }, {
    key: "wildcardInterop",
    value: function wildcardInterop() {
      return this._interop(this._hub.addHelper("interopRequireWildcard"));
    }
  }, {
    key: "_interop",
    value: function _interop(callee) {
      var statement = this._statements[this._statements.length - 1];

      if (statement.type === "ExpressionStatement") {
        statement.expression = t().callExpression(callee, [statement.expression]);
      } else if (statement.type === "VariableDeclaration") {
        (0, _assert().default)(statement.declarations.length === 1);
        statement.declarations[0].init = t().callExpression(callee, [statement.declarations[0].init]);
      } else {
        _assert().default.fail("Unexpected type.");
      }

      return this;
    }
  }, {
    key: "prop",
    value: function prop(name) {
      var statement = this._statements[this._statements.length - 1];

      if (statement.type === "ExpressionStatement") {
        statement.expression = t().memberExpression(statement.expression, t().identifier(name));
      } else if (statement.type === "VariableDeclaration") {
        (0, _assert().default)(statement.declarations.length === 1);
        statement.declarations[0].init = t().memberExpression(statement.declarations[0].init, t().identifier(name));
      } else {
        _assert().default.fail("Unexpected type:" + statement.type);
      }

      return this;
    }
  }, {
    key: "read",
    value: function read(name) {
      this._resultName = t().memberExpression(this._resultName, t().identifier(name));
    }
  }]);

  return ImportBuilder;
}();

exports.default = ImportBuilder;
//# sourceMappingURL=import-builder.js.map