{"version":3,"sources":["../../../../../../../client/node_modules/@babel/generator/lib/generators/typescript.js"],"names":["Object","defineProperty","exports","value","TSTypeAnnotation","TSTypeParameterDeclaration","TSTypeParameterInstantiation","TSTypeParameter","TSParameterProperty","TSDeclareFunction","TSDeclareMethod","TSQualifiedName","TSCallSignatureDeclaration","TSConstructSignatureDeclaration","TSPropertySignature","tsPrintPropertyOrMethodName","TSMethodSignature","TSIndexSignature","TSAnyKeyword","TSUnknownKeyword","TSNumberKeyword","TSObjectKeyword","TSBooleanKeyword","TSStringKeyword","TSSymbolKeyword","TSVoidKeyword","TSUndefinedKeyword","TSNullKeyword","TSNeverKeyword","TSThisType","TSFunctionType","TSConstructorType","tsPrintFunctionOrConstructorType","TSTypeReference","TSTypePredicate","TSTypeQuery","TSTypeLiteral","tsPrintTypeLiteralOrInterfaceBody","tsPrintBraced","TSArrayType","TSTupleType","TSOptionalType","TSRestType","TSUnionType","TSIntersectionType","tsPrintUnionOrIntersectionType","TSConditionalType","TSInferType","TSParenthesizedType","TSTypeOperator","TSIndexedAccessType","TSMappedType","TSLiteralType","TSExpressionWithTypeArguments","TSInterfaceDeclaration","TSInterfaceBody","TSTypeAliasDeclaration","TSAsExpression","TSTypeAssertion","TSEnumDeclaration","TSEnumMember","TSModuleDeclaration","TSModuleBlock","TSImportType","TSImportEqualsDeclaration","TSExternalModuleReference","TSNonNullExpression","TSExportAssignment","TSNamespaceExportDeclaration","tsPrintSignatureDeclarationBase","node","token","space","optional","print","typeAnnotation","printList","params","word","name","constraint","default","accessibility","readonly","_param","parameter","declare","_functionHead","_classMethodHead","left","right","initializer","computed","key","_parameters","parameters","typeParameters","typeName","parameterName","exprName","members","length","indent","newline","member","dedent","rightBrace","elementType","elementTypes","sep","printJoin","types","separator","checkType","extendsType","trueType","falseType","typeParameter","operator","objectType","indexType","tokenIfPlusMinus","self","tok","literal","expression","id","extendz","extends","body","isConst","const","global","type","argument","qualifier","isExport","moduleReference"],"mappings":"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","file":"typescript.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TSTypeAnnotation = TSTypeAnnotation;\nexports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;\nexports.TSTypeParameter = TSTypeParameter;\nexports.TSParameterProperty = TSParameterProperty;\nexports.TSDeclareFunction = TSDeclareFunction;\nexports.TSDeclareMethod = TSDeclareMethod;\nexports.TSQualifiedName = TSQualifiedName;\nexports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;\nexports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;\nexports.TSPropertySignature = TSPropertySignature;\nexports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;\nexports.TSMethodSignature = TSMethodSignature;\nexports.TSIndexSignature = TSIndexSignature;\nexports.TSAnyKeyword = TSAnyKeyword;\nexports.TSUnknownKeyword = TSUnknownKeyword;\nexports.TSNumberKeyword = TSNumberKeyword;\nexports.TSObjectKeyword = TSObjectKeyword;\nexports.TSBooleanKeyword = TSBooleanKeyword;\nexports.TSStringKeyword = TSStringKeyword;\nexports.TSSymbolKeyword = TSSymbolKeyword;\nexports.TSVoidKeyword = TSVoidKeyword;\nexports.TSUndefinedKeyword = TSUndefinedKeyword;\nexports.TSNullKeyword = TSNullKeyword;\nexports.TSNeverKeyword = TSNeverKeyword;\nexports.TSThisType = TSThisType;\nexports.TSFunctionType = TSFunctionType;\nexports.TSConstructorType = TSConstructorType;\nexports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;\nexports.TSTypeReference = TSTypeReference;\nexports.TSTypePredicate = TSTypePredicate;\nexports.TSTypeQuery = TSTypeQuery;\nexports.TSTypeLiteral = TSTypeLiteral;\nexports.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;\nexports.tsPrintBraced = tsPrintBraced;\nexports.TSArrayType = TSArrayType;\nexports.TSTupleType = TSTupleType;\nexports.TSOptionalType = TSOptionalType;\nexports.TSRestType = TSRestType;\nexports.TSUnionType = TSUnionType;\nexports.TSIntersectionType = TSIntersectionType;\nexports.tsPrintUnionOrIntersectionType = tsPrintUnionOrIntersectionType;\nexports.TSConditionalType = TSConditionalType;\nexports.TSInferType = TSInferType;\nexports.TSParenthesizedType = TSParenthesizedType;\nexports.TSTypeOperator = TSTypeOperator;\nexports.TSIndexedAccessType = TSIndexedAccessType;\nexports.TSMappedType = TSMappedType;\nexports.TSLiteralType = TSLiteralType;\nexports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;\nexports.TSInterfaceDeclaration = TSInterfaceDeclaration;\nexports.TSInterfaceBody = TSInterfaceBody;\nexports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;\nexports.TSAsExpression = TSAsExpression;\nexports.TSTypeAssertion = TSTypeAssertion;\nexports.TSEnumDeclaration = TSEnumDeclaration;\nexports.TSEnumMember = TSEnumMember;\nexports.TSModuleDeclaration = TSModuleDeclaration;\nexports.TSModuleBlock = TSModuleBlock;\nexports.TSImportType = TSImportType;\nexports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;\nexports.TSExternalModuleReference = TSExternalModuleReference;\nexports.TSNonNullExpression = TSNonNullExpression;\nexports.TSExportAssignment = TSExportAssignment;\nexports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;\nexports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;\n\nfunction TSTypeAnnotation(node) {\n  this.token(\":\");\n  this.space();\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSTypeParameterInstantiation(node) {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  this.token(\">\");\n}\n\nfunction TSTypeParameter(node) {\n  this.word(node.name);\n\n  if (node.constraint) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.constraint, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nfunction TSParameterProperty(node) {\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this._param(node.parameter);\n}\n\nfunction TSDeclareFunction(node) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this._functionHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSDeclareMethod(node) {\n  this._classMethodHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSQualifiedName(node) {\n  this.print(node.left, node);\n  this.token(\".\");\n  this.print(node.right, node);\n}\n\nfunction TSCallSignatureDeclaration(node) {\n  this.tsPrintSignatureDeclarationBase(node);\n}\n\nfunction TSConstructSignatureDeclaration(node) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintSignatureDeclarationBase(node);\n}\n\nfunction TSPropertySignature(node) {\n  const {\n    readonly,\n    initializer\n  } = node;\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.tsPrintPropertyOrMethodName(node);\n  this.print(node.typeAnnotation, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\";\");\n}\n\nfunction tsPrintPropertyOrMethodName(node) {\n  if (node.computed) {\n    this.token(\"[\");\n  }\n\n  this.print(node.key, node);\n\n  if (node.computed) {\n    this.token(\"]\");\n  }\n\n  if (node.optional) {\n    this.token(\"?\");\n  }\n}\n\nfunction TSMethodSignature(node) {\n  this.tsPrintPropertyOrMethodName(node);\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSIndexSignature(node) {\n  const {\n    readonly\n  } = node;\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n\n  this._parameters(node.parameters, node);\n\n  this.token(\"]\");\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAnyKeyword() {\n  this.word(\"any\");\n}\n\nfunction TSUnknownKeyword() {\n  this.word(\"unknown\");\n}\n\nfunction TSNumberKeyword() {\n  this.word(\"number\");\n}\n\nfunction TSObjectKeyword() {\n  this.word(\"object\");\n}\n\nfunction TSBooleanKeyword() {\n  this.word(\"boolean\");\n}\n\nfunction TSStringKeyword() {\n  this.word(\"string\");\n}\n\nfunction TSSymbolKeyword() {\n  this.word(\"symbol\");\n}\n\nfunction TSVoidKeyword() {\n  this.word(\"void\");\n}\n\nfunction TSUndefinedKeyword() {\n  this.word(\"undefined\");\n}\n\nfunction TSNullKeyword() {\n  this.word(\"null\");\n}\n\nfunction TSNeverKeyword() {\n  this.word(\"never\");\n}\n\nfunction TSThisType() {\n  this.word(\"this\");\n}\n\nfunction TSFunctionType(node) {\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction TSConstructorType(node) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction tsPrintFunctionOrConstructorType(node) {\n  const {\n    typeParameters,\n    parameters\n  } = node;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  this.space();\n  this.token(\"=>\");\n  this.space();\n  this.print(node.typeAnnotation.typeAnnotation, node);\n}\n\nfunction TSTypeReference(node) {\n  this.print(node.typeName, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSTypePredicate(node) {\n  this.print(node.parameterName);\n  this.space();\n  this.word(\"is\");\n  this.space();\n  this.print(node.typeAnnotation.typeAnnotation);\n}\n\nfunction TSTypeQuery(node) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.exprName);\n}\n\nfunction TSTypeLiteral(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);\n}\n\nfunction tsPrintTypeLiteralOrInterfaceBody(members, node) {\n  this.tsPrintBraced(members, node);\n}\n\nfunction tsPrintBraced(members, node) {\n  this.token(\"{\");\n\n  if (members.length) {\n    this.indent();\n    this.newline();\n\n    for (const member of members) {\n      this.print(member, node);\n      this.newline();\n    }\n\n    this.dedent();\n    this.rightBrace();\n  } else {\n    this.token(\"}\");\n  }\n}\n\nfunction TSArrayType(node) {\n  this.print(node.elementType, node);\n  this.token(\"[]\");\n}\n\nfunction TSTupleType(node) {\n  this.token(\"[\");\n  this.printList(node.elementTypes, node);\n  this.token(\"]\");\n}\n\nfunction TSOptionalType(node) {\n  this.print(node.typeAnnotation, node);\n  this.token(\"?\");\n}\n\nfunction TSRestType(node) {\n  this.token(\"...\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSUnionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"|\");\n}\n\nfunction TSIntersectionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"&\");\n}\n\nfunction tsPrintUnionOrIntersectionType(node, sep) {\n  this.printJoin(node.types, node, {\n    separator() {\n      this.space();\n      this.token(sep);\n      this.space();\n    }\n\n  });\n}\n\nfunction TSConditionalType(node) {\n  this.print(node.checkType);\n  this.space();\n  this.word(\"extends\");\n  this.space();\n  this.print(node.extendsType);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.trueType);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.falseType);\n}\n\nfunction TSInferType(node) {\n  this.token(\"infer\");\n  this.space();\n  this.print(node.typeParameter);\n}\n\nfunction TSParenthesizedType(node) {\n  this.token(\"(\");\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nfunction TSTypeOperator(node) {\n  this.token(node.operator);\n  this.space();\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSIndexedAccessType(node) {\n  this.print(node.objectType, node);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nfunction TSMappedType(node) {\n  const {\n    readonly,\n    typeParameter,\n    optional\n  } = node;\n  this.token(\"{\");\n  this.space();\n\n  if (readonly) {\n    tokenIfPlusMinus(this, readonly);\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.word(typeParameter.name);\n  this.space();\n  this.word(\"in\");\n  this.space();\n  this.print(typeParameter.constraint, typeParameter);\n  this.token(\"]\");\n\n  if (optional) {\n    tokenIfPlusMinus(this, optional);\n    this.token(\"?\");\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.typeAnnotation, node);\n  this.space();\n  this.token(\"}\");\n}\n\nfunction tokenIfPlusMinus(self, tok) {\n  if (tok !== true) {\n    self.token(tok);\n  }\n}\n\nfunction TSLiteralType(node) {\n  this.print(node.literal, node);\n}\n\nfunction TSExpressionWithTypeArguments(node) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSInterfaceDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    extends: extendz,\n    body\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"interface\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n\n  if (extendz) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(extendz, node);\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSInterfaceBody(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);\n}\n\nfunction TSTypeAliasDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    typeAnnotation\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"type\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAsExpression(node) {\n  const {\n    expression,\n    typeAnnotation\n  } = node;\n  this.print(expression, node);\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(typeAnnotation, node);\n}\n\nfunction TSTypeAssertion(node) {\n  const {\n    typeAnnotation,\n    expression\n  } = node;\n  this.token(\"<\");\n  this.print(typeAnnotation, node);\n  this.token(\">\");\n  this.space();\n  this.print(expression, node);\n}\n\nfunction TSEnumDeclaration(node) {\n  const {\n    declare,\n    const: isConst,\n    id,\n    members\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (isConst) {\n    this.word(\"const\");\n    this.space();\n  }\n\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.tsPrintBraced(members, node);\n}\n\nfunction TSEnumMember(node) {\n  const {\n    id,\n    initializer\n  } = node;\n  this.print(id, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\",\");\n}\n\nfunction TSModuleDeclaration(node) {\n  const {\n    declare,\n    id\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (!node.global) {\n    this.word(id.type === \"Identifier\" ? \"namespace\" : \"module\");\n    this.space();\n  }\n\n  this.print(id, node);\n\n  if (!node.body) {\n    this.token(\";\");\n    return;\n  }\n\n  let body = node.body;\n\n  while (body.type === \"TSModuleDeclaration\") {\n    this.token(\".\");\n    this.print(body.id, body);\n    body = body.body;\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSModuleBlock(node) {\n  this.tsPrintBraced(node.body, node);\n}\n\nfunction TSImportType(node) {\n  const {\n    argument,\n    qualifier,\n    typeParameters\n  } = node;\n  this.word(\"import\");\n  this.token(\"(\");\n  this.print(argument, node);\n  this.token(\")\");\n\n  if (qualifier) {\n    this.token(\".\");\n    this.print(qualifier, node);\n  }\n\n  if (typeParameters) {\n    this.print(typeParameters, node);\n  }\n}\n\nfunction TSImportEqualsDeclaration(node) {\n  const {\n    isExport,\n    id,\n    moduleReference\n  } = node;\n\n  if (isExport) {\n    this.word(\"export\");\n    this.space();\n  }\n\n  this.word(\"import\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(moduleReference, node);\n  this.token(\";\");\n}\n\nfunction TSExternalModuleReference(node) {\n  this.token(\"require(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nfunction TSNonNullExpression(node) {\n  this.print(node.expression, node);\n  this.token(\"!\");\n}\n\nfunction TSExportAssignment(node) {\n  this.word(\"export\");\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.expression, node);\n  this.token(\";\");\n}\n\nfunction TSNamespaceExportDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.word(\"namespace\");\n  this.space();\n  this.print(node.id, node);\n}\n\nfunction tsPrintSignatureDeclarationBase(node) {\n  const {\n    typeParameters,\n    parameters\n  } = node;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  this.print(node.typeAnnotation, node);\n}"]}