{"version":3,"sources":["../../../../../../../client/node_modules/@babel/generator/lib/generators/base.js"],"names":["Object","defineProperty","exports","value","File","Program","BlockStatement","Noop","Directive","DirectiveLiteral","InterpreterDirective","Placeholder","node","program","print","interpreter","printInnerComments","printSequence","directives","length","newline","body","token","hasDirectives","indent","removeTrailingNewline","source","loc","endsWith","rightBrace","semicolon","unescapedSingleQuoteRE","unescapedDoubleQuoteRE","raw","getPossibleRaw","test","Error","name","expectedNode"],"mappings":"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","file":"base.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.File = File;\nexports.Program = Program;\nexports.BlockStatement = BlockStatement;\nexports.Noop = Noop;\nexports.Directive = Directive;\nexports.DirectiveLiteral = DirectiveLiteral;\nexports.InterpreterDirective = InterpreterDirective;\nexports.Placeholder = Placeholder;\n\nfunction File(node) {\n  if (node.program) {\n    this.print(node.program.interpreter, node);\n  }\n\n  this.print(node.program, node);\n}\n\nfunction Program(node) {\n  this.printInnerComments(node, false);\n  this.printSequence(node.directives, node);\n  if (node.directives && node.directives.length) this.newline();\n  this.printSequence(node.body, node);\n}\n\nfunction BlockStatement(node) {\n  this.token(\"{\");\n  this.printInnerComments(node);\n  const hasDirectives = node.directives && node.directives.length;\n\n  if (node.body.length || hasDirectives) {\n    this.newline();\n    this.printSequence(node.directives, node, {\n      indent: true\n    });\n    if (hasDirectives) this.newline();\n    this.printSequence(node.body, node, {\n      indent: true\n    });\n    this.removeTrailingNewline();\n    this.source(\"end\", node.loc);\n    if (!this.endsWith(\"\\n\")) this.newline();\n    this.rightBrace();\n  } else {\n    this.source(\"end\", node.loc);\n    this.token(\"}\");\n  }\n}\n\nfunction Noop() {}\n\nfunction Directive(node) {\n  this.print(node.value, node);\n  this.semicolon();\n}\n\nconst unescapedSingleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*'/;\nconst unescapedDoubleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*\"/;\n\nfunction DirectiveLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (raw != null) {\n    this.token(raw);\n    return;\n  }\n\n  const {\n    value\n  } = node;\n\n  if (!unescapedDoubleQuoteRE.test(value)) {\n    this.token(`\"${value}\"`);\n  } else if (!unescapedSingleQuoteRE.test(value)) {\n    this.token(`'${value}'`);\n  } else {\n    throw new Error(\"Malformed AST: it is not possible to print a directive containing\" + \" both unescaped single and double quotes.\");\n  }\n}\n\nfunction InterpreterDirective(node) {\n  this.token(`#!${node.value}\\n`);\n}\n\nfunction Placeholder(node) {\n  this.token(\"%%\");\n  this.print(node.name);\n  this.token(\"%%\");\n\n  if (node.expectedNode === \"Statement\") {\n    this.semicolon();\n  }\n}"]}