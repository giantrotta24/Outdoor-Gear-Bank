{"version":3,"sources":["../../../../../../client/node_modules/@babel/helper-builder-binary-assignment-operator-visitor/lib/index.js"],"names":["Object","defineProperty","exports","value","default","_default","_helperExplodeAssignableExpression","data","_interopRequireDefault","require","t","_interopRequireWildcard","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","desc","getOwnPropertyDescriptor","get","set","opts","build","operator","AssignmentExpression","path","node","scope","nodes","exploded","left","push","assignmentExpression","ref","uid","right","replaceWith","sequenceExpression","BinaryExpression"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,SAAO;AADoC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,QAAlB;;AAEA,SAASC,kCAAT,GAA8C;AAC5C,MAAMC,OAAOC,uBAAuBC,QAAQ,6CAAR,CAAvB,CAAb;;AAEAH,uCAAqC,8CAAY;AAC/C,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,CAAT,GAAa;AACX,MAAMH,OAAOI,wBAAwBF,QAAQ,cAAR,CAAxB,CAAb;;AAEAC,MAAI,aAAY;AACd,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASI,uBAAT,CAAiCC,GAAjC,EAAsC;AAAE,MAAIA,OAAOA,IAAIC,UAAf,EAA2B;AAAE,WAAOD,GAAP;AAAa,GAA1C,MAAgD;AAAE,QAAIE,SAAS,EAAb,CAAiB,IAAIF,OAAO,IAAX,EAAiB;AAAE,WAAK,IAAIG,GAAT,IAAgBH,GAAhB,EAAqB;AAAE,YAAIZ,OAAOgB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,GAArC,EAA0CG,GAA1C,CAAJ,EAAoD;AAAE,cAAII,OAAOnB,OAAOC,cAAP,IAAyBD,OAAOoB,wBAAhC,GAA2DpB,OAAOoB,wBAAP,CAAgCR,GAAhC,EAAqCG,GAArC,CAA3D,GAAuG,EAAlH,CAAsH,IAAII,KAAKE,GAAL,IAAYF,KAAKG,GAArB,EAA0B;AAAEtB,mBAAOC,cAAP,CAAsBa,MAAtB,EAA8BC,GAA9B,EAAmCI,IAAnC;AAA2C,WAAvE,MAA6E;AAAEL,mBAAOC,GAAP,IAAcH,IAAIG,GAAJ,CAAd;AAAyB;AAAE;AAAE;AAAE,KAACD,OAAOV,OAAP,GAAiBQ,GAAjB,CAAsB,OAAOE,MAAP;AAAgB;AAAE;;AAExd,SAASN,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAER,SAASQ,GAAX,EAArC;AAAwD;;AAE/F,SAASP,QAAT,CAAkBkB,IAAlB,EAAwB;AAAA,MAEpBC,KAFoB,GAIlBD,IAJkB,CAEpBC,KAFoB;AAAA,MAGpBC,QAHoB,GAIlBF,IAJkB,CAGpBE,QAHoB;;AAKtB,SAAO;AACLC,wBADK,gCACgBC,IADhB,EACsB;AAAA,UAEvBC,IAFuB,GAIrBD,IAJqB,CAEvBC,IAFuB;AAAA,UAGvBC,KAHuB,GAIrBF,IAJqB,CAGvBE,KAHuB;;AAKzB,UAAID,KAAKH,QAAL,KAAkBA,WAAW,GAAjC,EAAsC;AACtC,UAAMK,QAAQ,EAAd;AACA,UAAMC,WAAW,CAAC,GAAGzB,qCAAqCF,OAAzC,EAAkDwB,KAAKI,IAAvD,EAA6DF,KAA7D,EAAoE,IAApE,EAA0ED,KAA1E,CAAjB;AACAC,YAAMG,IAAN,CAAWvB,IAAIwB,oBAAJ,CAAyB,GAAzB,EAA8BH,SAASI,GAAvC,EAA4CX,MAAMO,SAASK,GAAf,EAAoBR,KAAKS,KAAzB,CAA5C,CAAX;AACAV,WAAKW,WAAL,CAAiB5B,IAAI6B,kBAAJ,CAAuBT,KAAvB,CAAjB;AACD,KAXI;AAaLU,oBAbK,4BAaYb,IAbZ,EAakB;AAAA,UAEnBC,IAFmB,GAGjBD,IAHiB,CAEnBC,IAFmB;;;AAKrB,UAAIA,KAAKH,QAAL,KAAkBA,QAAtB,EAAgC;AAC9BE,aAAKW,WAAL,CAAiBd,MAAMI,KAAKI,IAAX,EAAiBJ,KAAKS,KAAtB,CAAjB;AACD;AACF;AArBI,GAAP;AAwBD","file":"index.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nfunction _helperExplodeAssignableExpression() {\n  const data = _interopRequireDefault(require(\"@babel/helper-explode-assignable-expression\"));\n\n  _helperExplodeAssignableExpression = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction t() {\n  const data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  t = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _default(opts) {\n  const {\n    build,\n    operator\n  } = opts;\n  return {\n    AssignmentExpression(path) {\n      const {\n        node,\n        scope\n      } = path;\n      if (node.operator !== operator + \"=\") return;\n      const nodes = [];\n      const exploded = (0, _helperExplodeAssignableExpression().default)(node.left, nodes, this, scope);\n      nodes.push(t().assignmentExpression(\"=\", exploded.ref, build(exploded.uid, node.right)));\n      path.replaceWith(t().sequenceExpression(nodes));\n    },\n\n    BinaryExpression(path) {\n      const {\n        node\n      } = path;\n\n      if (node.operator === operator) {\n        path.replaceWith(build(node.left, node.right));\n      }\n    }\n\n  };\n}"]}