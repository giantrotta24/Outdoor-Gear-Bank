{"version":3,"sources":["../../../../../../client/node_modules/@babel/helper-explode-assignable-expression/lib/index.js"],"names":["Object","defineProperty","exports","value","default","_default","t","data","_interopRequireWildcard","require","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","desc","getOwnPropertyDescriptor","get","set","getObjRef","node","nodes","file","scope","ref","isSuper","isIdentifier","hasBinding","name","isMemberExpression","object","Error","type","temp","generateUidIdentifierBasedOnNode","push","id","assignmentExpression","cloneNode","getPropRef","prop","property","toComputedKey","isLiteral","isPureish","allowedSingleIdent","uid","computed","memberExpression"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,SAAO;AADoC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,QAAlB;;AAEA,SAASC,CAAT,GAAa;AACX,MAAMC,OAAOC,wBAAwBC,QAAQ,cAAR,CAAxB,CAAb;;AAEAH,MAAI,aAAY;AACd,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASC,uBAAT,CAAiCE,GAAjC,EAAsC;AAAE,MAAIA,OAAOA,IAAIC,UAAf,EAA2B;AAAE,WAAOD,GAAP;AAAa,GAA1C,MAAgD;AAAE,QAAIE,SAAS,EAAb,CAAiB,IAAIF,OAAO,IAAX,EAAiB;AAAE,WAAK,IAAIG,GAAT,IAAgBH,GAAhB,EAAqB;AAAE,YAAIV,OAAOc,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,GAArC,EAA0CG,GAA1C,CAAJ,EAAoD;AAAE,cAAII,OAAOjB,OAAOC,cAAP,IAAyBD,OAAOkB,wBAAhC,GAA2DlB,OAAOkB,wBAAP,CAAgCR,GAAhC,EAAqCG,GAArC,CAA3D,GAAuG,EAAlH,CAAsH,IAAII,KAAKE,GAAL,IAAYF,KAAKG,GAArB,EAA0B;AAAEpB,mBAAOC,cAAP,CAAsBW,MAAtB,EAA8BC,GAA9B,EAAmCI,IAAnC;AAA2C,WAAvE,MAA6E;AAAEL,mBAAOC,GAAP,IAAcH,IAAIG,GAAJ,CAAd;AAAyB;AAAE;AAAE;AAAE,KAACD,OAAOR,OAAP,GAAiBM,GAAjB,CAAsB,OAAOE,MAAP;AAAgB;AAAE;;AAExd,SAASS,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,IAAhC,EAAsCC,KAAtC,EAA6C;AAC3C,MAAIC,YAAJ;;AAEA,MAAIpB,IAAIqB,OAAJ,CAAYL,IAAZ,CAAJ,EAAuB;AACrB,WAAOA,IAAP;AACD,GAFD,MAEO,IAAIhB,IAAIsB,YAAJ,CAAiBN,IAAjB,CAAJ,EAA4B;AACjC,QAAIG,MAAMI,UAAN,CAAiBP,KAAKQ,IAAtB,CAAJ,EAAiC;AAC/B,aAAOR,IAAP;AACD,KAFD,MAEO;AACLI,YAAMJ,IAAN;AACD;AACF,GANM,MAMA,IAAIhB,IAAIyB,kBAAJ,CAAuBT,IAAvB,CAAJ,EAAkC;AACvCI,UAAMJ,KAAKU,MAAX;;AAEA,QAAI1B,IAAIqB,OAAJ,CAAYD,GAAZ,KAAoBpB,IAAIsB,YAAJ,CAAiBF,GAAjB,KAAyBD,MAAMI,UAAN,CAAiBH,IAAII,IAArB,CAAjD,EAA6E;AAC3E,aAAOJ,GAAP;AACD;AACF,GANM,MAMA;AACL,UAAM,IAAIO,KAAJ,sCAA6CX,KAAKY,IAAlD,CAAN;AACD;;AAED,MAAMC,OAAOV,MAAMW,gCAAN,CAAuCV,GAAvC,CAAb;AACAD,QAAMY,IAAN,CAAW;AACTC,QAAIH;AADK,GAAX;AAGAZ,QAAMc,IAAN,CAAW/B,IAAIiC,oBAAJ,CAAyB,GAAzB,EAA8BjC,IAAIkC,SAAJ,CAAcL,IAAd,CAA9B,EAAmD7B,IAAIkC,SAAJ,CAAcd,GAAd,CAAnD,CAAX;AACA,SAAOS,IAAP;AACD;;AAED,SAASM,UAAT,CAAoBnB,IAApB,EAA0BC,KAA1B,EAAiCC,IAAjC,EAAuCC,KAAvC,EAA8C;AAC5C,MAAMiB,OAAOpB,KAAKqB,QAAlB;AACA,MAAM9B,MAAMP,IAAIsC,aAAJ,CAAkBtB,IAAlB,EAAwBoB,IAAxB,CAAZ;AACA,MAAIpC,IAAIuC,SAAJ,CAAchC,GAAd,KAAsBP,IAAIwC,SAAJ,CAAcjC,GAAd,CAA1B,EAA8C,OAAOA,GAAP;AAC9C,MAAMsB,OAAOV,MAAMW,gCAAN,CAAuCM,IAAvC,CAAb;AACAjB,QAAMY,IAAN,CAAW;AACTC,QAAIH;AADK,GAAX;AAGAZ,QAAMc,IAAN,CAAW/B,IAAIiC,oBAAJ,CAAyB,GAAzB,EAA8BjC,IAAIkC,SAAJ,CAAcL,IAAd,CAA9B,EAAmD7B,IAAIkC,SAAJ,CAAcE,IAAd,CAAnD,CAAX;AACA,SAAOP,IAAP;AACD;;AAED,SAAS9B,QAAT,CAAkBiB,IAAlB,EAAwBC,KAAxB,EAA+BC,IAA/B,EAAqCC,KAArC,EAA4CsB,kBAA5C,EAAgE;AAC9D,MAAIrC,YAAJ;;AAEA,MAAIJ,IAAIsB,YAAJ,CAAiBN,IAAjB,KAA0ByB,kBAA9B,EAAkD;AAChDrC,UAAMY,IAAN;AACD,GAFD,MAEO;AACLZ,UAAMW,UAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,KAA7B,CAAN;AACD;;AAED,MAAIC,YAAJ;AAAA,MAASsB,YAAT;;AAEA,MAAI1C,IAAIsB,YAAJ,CAAiBN,IAAjB,CAAJ,EAA4B;AAC1BI,UAAMpB,IAAIkC,SAAJ,CAAclB,IAAd,CAAN;AACA0B,UAAMtC,GAAN;AACD,GAHD,MAGO;AACL,QAAMgC,OAAOD,WAAWnB,IAAX,EAAiBC,KAAjB,EAAwBC,IAAxB,EAA8BC,KAA9B,CAAb;AACA,QAAMwB,WAAW3B,KAAK2B,QAAL,IAAiB3C,IAAIuC,SAAJ,CAAcH,IAAd,CAAlC;AACAM,UAAM1C,IAAI4C,gBAAJ,CAAqB5C,IAAIkC,SAAJ,CAAc9B,GAAd,CAArB,EAAyCJ,IAAIkC,SAAJ,CAAcE,IAAd,CAAzC,EAA8DO,QAA9D,CAAN;AACAvB,UAAMpB,IAAI4C,gBAAJ,CAAqB5C,IAAIkC,SAAJ,CAAc9B,GAAd,CAArB,EAAyCJ,IAAIkC,SAAJ,CAAcE,IAAd,CAAzC,EAA8DO,QAA9D,CAAN;AACD;;AAED,SAAO;AACLD,SAAKA,GADA;AAELtB,SAAKA;AAFA,GAAP;AAID","file":"index.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nfunction t() {\n  const data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  t = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction getObjRef(node, nodes, file, scope) {\n  let ref;\n\n  if (t().isSuper(node)) {\n    return node;\n  } else if (t().isIdentifier(node)) {\n    if (scope.hasBinding(node.name)) {\n      return node;\n    } else {\n      ref = node;\n    }\n  } else if (t().isMemberExpression(node)) {\n    ref = node.object;\n\n    if (t().isSuper(ref) || t().isIdentifier(ref) && scope.hasBinding(ref.name)) {\n      return ref;\n    }\n  } else {\n    throw new Error(`We can't explode this node type ${node.type}`);\n  }\n\n  const temp = scope.generateUidIdentifierBasedOnNode(ref);\n  scope.push({\n    id: temp\n  });\n  nodes.push(t().assignmentExpression(\"=\", t().cloneNode(temp), t().cloneNode(ref)));\n  return temp;\n}\n\nfunction getPropRef(node, nodes, file, scope) {\n  const prop = node.property;\n  const key = t().toComputedKey(node, prop);\n  if (t().isLiteral(key) && t().isPureish(key)) return key;\n  const temp = scope.generateUidIdentifierBasedOnNode(prop);\n  scope.push({\n    id: temp\n  });\n  nodes.push(t().assignmentExpression(\"=\", t().cloneNode(temp), t().cloneNode(prop)));\n  return temp;\n}\n\nfunction _default(node, nodes, file, scope, allowedSingleIdent) {\n  let obj;\n\n  if (t().isIdentifier(node) && allowedSingleIdent) {\n    obj = node;\n  } else {\n    obj = getObjRef(node, nodes, file, scope);\n  }\n\n  let ref, uid;\n\n  if (t().isIdentifier(node)) {\n    ref = t().cloneNode(node);\n    uid = obj;\n  } else {\n    const prop = getPropRef(node, nodes, file, scope);\n    const computed = node.computed || t().isLiteral(prop);\n    uid = t().memberExpression(t().cloneNode(obj), t().cloneNode(prop), computed);\n    ref = t().memberExpression(t().cloneNode(obj), t().cloneNode(prop), computed);\n  }\n\n  return {\n    uid: uid,\n    ref: ref\n  };\n}"]}