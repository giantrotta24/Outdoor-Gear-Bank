"use strict";

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createClassFeaturePlugin = createClassFeaturePlugin;
Object.defineProperty(exports, "FEATURES", {
  enumerable: true,
  get: function get() {
    return _features.FEATURES;
  }
});

function _helperFunctionName() {
  var data = _interopRequireDefault(require("@babel/helper-function-name"));

  _helperFunctionName = function _helperFunctionName() {
    return data;
  };

  return data;
}

function _helperSplitExportDeclaration() {
  var data = _interopRequireDefault(require("@babel/helper-split-export-declaration"));

  _helperSplitExportDeclaration = function _helperSplitExportDeclaration() {
    return data;
  };

  return data;
}

var _fields = require("./fields");

var _decorators = require("./decorators");

var _misc = require("./misc");

var _features = require("./features");

var _package = _interopRequireDefault(require("../package.json"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var version = _package.default.version.split(".").reduce(function (v, x) {
  return v * 1e5 + +x;
}, 0);

var versionKey = "@babel/plugin-class-features/version";

function createClassFeaturePlugin(_ref) {
  var name = _ref.name,
      feature = _ref.feature,
      loose = _ref.loose,
      manipulateOptions = _ref.manipulateOptions;

  return {
    name: name,
    manipulateOptions: manipulateOptions,

    pre: function pre() {
      (0, _features.enableFeature)(this.file, feature, loose);

      if (!this.file.get(versionKey) || this.file.get(versionKey) < version) {
        this.file.set(versionKey, version);
      }
    },


    visitor: {
      Class: function Class(path, state) {
        if (this.file.get(versionKey) !== version) return;
        (0, _features.verifyUsedFeatures)(path, this.file);
        var loose = (0, _features.isLoose)(this.file, feature);
        var constructor = void 0;
        var isDecorated = (0, _decorators.hasOwnDecorators)(path.node);
        var props = [];
        var elements = [];
        var computedPaths = [];
        var privateNames = new Set();
        var body = path.get("body");

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = body.get("body")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _path = _step.value;

            (0, _features.verifyUsedFeatures)(_path, this.file);

            if (_path.node.computed) {
              computedPaths.push(_path);
            }

            if (_path.isPrivate()) {
              var _name = _path.node.key.id.name;

              var getName = "get " + _name;
              var setName = "set " + _name;

              if (_path.node.kind === "get") {
                if (privateNames.has(getName) || privateNames.has(_name) && !privateNames.has(setName)) {
                  throw _path.buildCodeFrameError("Duplicate private field");
                }

                privateNames.add(getName).add(_name);
              } else if (_path.node.kind === "set") {
                if (privateNames.has(setName) || privateNames.has(_name) && !privateNames.has(getName)) {
                  throw _path.buildCodeFrameError("Duplicate private field");
                }

                privateNames.add(setName).add(_name);
              } else {
                if (privateNames.has(_name) && !privateNames.has(getName) && !privateNames.has(setName) || privateNames.has(_name) && (privateNames.has(getName) || privateNames.has(setName))) {
                  throw _path.buildCodeFrameError("Duplicate private field");
                }

                privateNames.add(_name);
              }
            }

            if (_path.isClassMethod({
              kind: "constructor"
            })) {
              constructor = _path;
            } else {
              elements.push(_path);

              if (_path.isProperty() || _path.isPrivate()) {
                props.push(_path);
              }
            }

            if (!isDecorated) isDecorated = (0, _decorators.hasOwnDecorators)(_path.node);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (!props.length && !isDecorated) return;
        var ref = void 0;

        if (path.isClassExpression() || !path.node.id) {
          (0, _helperFunctionName().default)(path);
          ref = path.scope.generateUidIdentifier("class");
        } else {
          ref = path.node.id;
        }

        var privateNamesMap = (0, _fields.buildPrivateNamesMap)(props);
        var privateNamesNodes = (0, _fields.buildPrivateNamesNodes)(privateNamesMap, loose, state);
        (0, _fields.transformPrivateNamesUsage)(ref, path, privateNamesMap, loose, state);
        var keysNodes = void 0,
            staticNodes = void 0,
            instanceNodes = void 0,
            wrapClass = void 0;

        if (isDecorated) {
          staticNodes = keysNodes = [];

          var _ref2 = (0, _decorators.buildDecoratedClass)(ref, path, elements, this.file);

          instanceNodes = _ref2.instanceNodes;
          wrapClass = _ref2.wrapClass;
        } else {
          keysNodes = (0, _misc.extractComputedKeys)(ref, path, computedPaths, this.file);

          var _ref3 = (0, _fields.buildFieldsInitNodes)(ref, path.node.superClass, props, privateNamesMap, state, loose);

          staticNodes = _ref3.staticNodes;
          instanceNodes = _ref3.instanceNodes;
          wrapClass = _ref3.wrapClass;
        }

        if (instanceNodes.length > 0) {
          (0, _misc.injectInitialization)(path, constructor, instanceNodes, function (referenceVisitor, state) {
            if (isDecorated) return;

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = props[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var prop = _step2.value;

                if (prop.node.static) continue;
                prop.traverse(referenceVisitor, state);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          });
        }

        path = wrapClass(path);
        path.insertBefore(keysNodes);
        path.insertAfter([].concat(_toConsumableArray(privateNamesNodes), _toConsumableArray(staticNodes)));
      },
      PrivateName: function PrivateName(path) {
        if (this.file.get(versionKey) !== version) return;
        throw path.buildCodeFrameError("Unknown PrivateName \"" + path + "\"");
      },
      ExportDefaultDeclaration: function ExportDefaultDeclaration(path) {
        if (this.file.get(versionKey) !== version) return;
        var decl = path.get("declaration");

        if (decl.isClassDeclaration() && (0, _decorators.hasDecorators)(decl.node)) {
          if (decl.node.id) {
            (0, _helperSplitExportDeclaration().default)(path);
          } else {
            decl.node.type = "ClassExpression";
          }
        }
      }
    }
  };
}
//# sourceMappingURL=index.js.map