"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _templateObject = _taggedTemplateLiteral(["super(...args)"], ["super(...args)"]);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.injectInitialization = injectInitialization;
exports.extractComputedKeys = extractComputedKeys;

function _core() {
  var data = require("@babel/core");

  _core = function _core() {
    return data;
  };

  return data;
}

function _helperReplaceSupers() {
  var data = require("@babel/helper-replace-supers");

  _helperReplaceSupers = function _helperReplaceSupers() {
    return data;
  };

  return data;
}

var findBareSupers = _core().traverse.visitors.merge([{
  Super: function Super(path) {
    var node = path.node,
        parentPath = path.parentPath;


    if (parentPath.isCallExpression({
      callee: node
    })) {
      this.push(parentPath);
    }
  }
}, _helperReplaceSupers().environmentVisitor]);

var referenceVisitor = {
  "TSTypeAnnotation|TypeAnnotation": function TSTypeAnnotationTypeAnnotation(path) {
    path.skip();
  },
  ReferencedIdentifier: function ReferencedIdentifier(path) {
    if (this.scope.hasOwnBinding(path.node.name)) {
      this.scope.rename(path.node.name);
      path.skip();
    }
  }
};

var classFieldDefinitionEvaluationTDZVisitor = _core().traverse.visitors.merge([{
  ReferencedIdentifier: function ReferencedIdentifier(path) {
    if (this.classBinding && this.classBinding === path.scope.getBinding(path.node.name)) {
      var classNameTDZError = this.file.addHelper("classNameTDZError");

      var throwNode = _core().types.callExpression(classNameTDZError, [_core().types.stringLiteral(path.node.name)]);

      path.replaceWith(_core().types.sequenceExpression([throwNode, path.node]));
      path.skip();
    }
  }
}, _helperReplaceSupers().environmentVisitor]);

function injectInitialization(path, constructor, nodes, renamer) {
  if (!nodes.length) return;
  var isDerived = !!path.node.superClass;

  if (!constructor) {
    var newConstructor = _core().types.classMethod("constructor", _core().types.identifier("constructor"), [], _core().types.blockStatement([]));

    if (isDerived) {
      newConstructor.params = [_core().types.restElement(_core().types.identifier("args"))];
      newConstructor.body.body.push(_core().template.statement.ast(_templateObject));
    }

    var _path$get$unshiftCont = path.get("body").unshiftContainer("body", newConstructor);

    var _path$get$unshiftCont2 = _slicedToArray(_path$get$unshiftCont, 1);

    constructor = _path$get$unshiftCont2[0];
  }

  if (renamer) {
    renamer(referenceVisitor, {
      scope: constructor.scope
    });
  }

  if (isDerived) {
    var bareSupers = [];
    constructor.traverse(findBareSupers, bareSupers);

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = bareSupers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var bareSuper = _step.value;

        bareSuper.insertAfter(nodes);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  } else {
    constructor.get("body").unshiftContainer("body", nodes);
  }
}

function extractComputedKeys(ref, path, computedPaths, file) {
  var declarations = [];

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = computedPaths[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var computedPath = _step2.value;

      computedPath.traverse(classFieldDefinitionEvaluationTDZVisitor, {
        classBinding: path.node.id && path.scope.getBinding(path.node.id.name),
        file: file
      });
      var computedNode = computedPath.node;

      if (!computedPath.get("key").isConstantExpression()) {
        var ident = path.scope.generateUidIdentifierBasedOnNode(computedNode.key);
        declarations.push(_core().types.variableDeclaration("var", [_core().types.variableDeclarator(ident, computedNode.key)]));
        computedNode.key = _core().types.cloneNode(ident);
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return declarations;
}
//# sourceMappingURL=misc.js.map