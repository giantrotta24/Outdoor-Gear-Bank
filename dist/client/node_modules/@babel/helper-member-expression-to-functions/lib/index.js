"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = memberExpressionToFunctions;

function t() {
  var data = _interopRequireWildcard(require("@babel/types"));

  t = function t() {
    return data;
  };

  return data;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }newObj.default = obj;return newObj;
  }
}

var AssignmentMemoiser = function () {
  function AssignmentMemoiser() {
    _classCallCheck(this, AssignmentMemoiser);

    this._map = new WeakMap();
  }

  _createClass(AssignmentMemoiser, [{
    key: "has",
    value: function has(key) {
      return this._map.has(key);
    }
  }, {
    key: "get",
    value: function get(key) {
      if (!this.has(key)) return;

      var record = this._map.get(key);

      var value = record.value;

      record.count--;

      if (record.count === 0) {
        return t().assignmentExpression("=", value, key);
      }

      return value;
    }
  }, {
    key: "set",
    value: function set(key, value, count) {
      return this._map.set(key, {
        count: count,
        value: value
      });
    }
  }]);

  return AssignmentMemoiser;
}();

var handle = {
  memoise: function memoise() {},
  handle: function handle(member) {
    var node = member.node,
        parent = member.parent,
        parentPath = member.parentPath;


    if (parentPath.isUpdateExpression({
      argument: node
    })) {
      var operator = parent.operator,
          prefix = parent.prefix;

      this.memoise(member, 2);
      var value = t().binaryExpression(operator[0], t().unaryExpression("+", this.get(member)), t().numericLiteral(1));

      if (prefix) {
        parentPath.replaceWith(this.set(member, value));
      } else {
        var scope = member.scope;

        var ref = scope.generateUidIdentifierBasedOnNode(node);
        scope.push({
          id: ref
        });
        value.left = t().assignmentExpression("=", t().cloneNode(ref), value.left);
        parentPath.replaceWith(t().sequenceExpression([this.set(member, value), t().cloneNode(ref)]));
      }

      return;
    }

    if (parentPath.isAssignmentExpression({
      left: node
    })) {
      var _operator = parent.operator,
          right = parent.right;

      var _value = right;

      if (_operator !== "=") {
        this.memoise(member, 2);
        _value = t().binaryExpression(_operator.slice(0, -1), this.get(member), _value);
      }

      parentPath.replaceWith(this.set(member, _value));
      return;
    }

    if (parentPath.isCallExpression({
      callee: node
    })) {
      var args = parent.arguments;

      parentPath.replaceWith(this.call(member, args));
      return;
    }

    member.replaceWith(this.get(member));
  }
};

function memberExpressionToFunctions(path, visitor, state) {
  path.traverse(visitor, Object.assign({}, handle, state, {
    memoiser: new AssignmentMemoiser()
  }));
}
//# sourceMappingURL=index.js.map