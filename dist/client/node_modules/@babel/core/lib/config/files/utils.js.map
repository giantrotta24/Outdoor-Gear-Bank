{"version":3,"sources":["../../../../../../../../client/node_modules/@babel/core/lib/config/files/utils.js"],"names":["Object","defineProperty","exports","value","makeStaticFileCache","_fs","data","_interopRequireDefault","require","_caching","obj","__esModule","default","fn","makeStrongCache","filepath","cache","invalidate","fileMtime","forever","readFileSync","statSync","mtime","e","code"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,SAAO;AADoC,CAA7C;AAGAD,QAAQE,mBAAR,GAA8BA,mBAA9B;;AAEA,SAASC,GAAT,GAAe;AACb,MAAMC,OAAOC,uBAAuBC,QAAQ,IAAR,CAAvB,CAAb;;AAEAH,QAAM,eAAY;AAChB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAIG,WAAWD,QAAQ,YAAR,CAAf;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AAAwD;;AAE/F,SAASN,mBAAT,CAA6BS,EAA7B,EAAiC;AAC/B,SAAO,CAAC,GAAGJ,SAASK,eAAb,EAA8B,UAACC,QAAD,EAAWC,KAAX,EAAqB;AACxD,QAAIA,MAAMC,UAAN,CAAiB;AAAA,aAAMC,UAAUH,QAAV,CAAN;AAAA,KAAjB,MAAgD,IAApD,EAA0D;AACxDC,YAAMG,OAAN;AACA,aAAO,IAAP;AACD;;AAED,WAAON,GAAGE,QAAH,EAAaV,MAAMO,OAAN,CAAcQ,YAAd,CAA2BL,QAA3B,EAAqC,MAArC,CAAb,CAAP;AACD,GAPM,CAAP;AAQD;;AAED,SAASG,SAAT,CAAmBH,QAAnB,EAA6B;AAC3B,MAAI;AACF,WAAO,CAACV,MAAMO,OAAN,CAAcS,QAAd,CAAuBN,QAAvB,EAAiCO,KAAzC;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACV,QAAIA,EAAEC,IAAF,KAAW,QAAX,IAAuBD,EAAEC,IAAF,KAAW,SAAtC,EAAiD,MAAMD,CAAN;AAClD;;AAED,SAAO,IAAP;AACD","file":"utils.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeStaticFileCache = makeStaticFileCache;\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _caching = require(\"../caching\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction makeStaticFileCache(fn) {\n  return (0, _caching.makeStrongCache)((filepath, cache) => {\n    if (cache.invalidate(() => fileMtime(filepath)) === null) {\n      cache.forever();\n      return null;\n    }\n\n    return fn(filepath, _fs().default.readFileSync(filepath, \"utf8\"));\n  });\n}\n\nfunction fileMtime(filepath) {\n  try {\n    return +_fs().default.statSync(filepath).mtime;\n  } catch (e) {\n    if (e.code !== \"ENOENT\" && e.code !== \"ENOTDIR\") throw e;\n  }\n\n  return null;\n}"]}